// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mirror.proto

package mirror

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MirrorTextRequest struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MirrorTextRequest) Reset()         { *m = MirrorTextRequest{} }
func (m *MirrorTextRequest) String() string { return proto.CompactTextString(m) }
func (*MirrorTextRequest) ProtoMessage()    {}
func (*MirrorTextRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d929026f6c123c0c, []int{0}
}

func (m *MirrorTextRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MirrorTextRequest.Unmarshal(m, b)
}
func (m *MirrorTextRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MirrorTextRequest.Marshal(b, m, deterministic)
}
func (m *MirrorTextRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MirrorTextRequest.Merge(m, src)
}
func (m *MirrorTextRequest) XXX_Size() int {
	return xxx_messageInfo_MirrorTextRequest.Size(m)
}
func (m *MirrorTextRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MirrorTextRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MirrorTextRequest proto.InternalMessageInfo

func (m *MirrorTextRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type MirrorTextResponse struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MirrorTextResponse) Reset()         { *m = MirrorTextResponse{} }
func (m *MirrorTextResponse) String() string { return proto.CompactTextString(m) }
func (*MirrorTextResponse) ProtoMessage()    {}
func (*MirrorTextResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d929026f6c123c0c, []int{1}
}

func (m *MirrorTextResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MirrorTextResponse.Unmarshal(m, b)
}
func (m *MirrorTextResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MirrorTextResponse.Marshal(b, m, deterministic)
}
func (m *MirrorTextResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MirrorTextResponse.Merge(m, src)
}
func (m *MirrorTextResponse) XXX_Size() int {
	return xxx_messageInfo_MirrorTextResponse.Size(m)
}
func (m *MirrorTextResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MirrorTextResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MirrorTextResponse proto.InternalMessageInfo

func (m *MirrorTextResponse) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterType((*MirrorTextRequest)(nil), "mirror.MirrorTextRequest")
	proto.RegisterType((*MirrorTextResponse)(nil), "mirror.MirrorTextResponse")
}

func init() {
	proto.RegisterFile("mirror.proto", fileDescriptor_d929026f6c123c0c)
}

var fileDescriptor_d929026f6c123c0c = []byte{
	// 122 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0xcd, 0x2c, 0x2a,
	0xca, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xd4, 0xb9, 0x04,
	0x7d, 0xc1, 0xac, 0x90, 0xd4, 0x8a, 0x92, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x21,
	0x2e, 0x96, 0x92, 0xd4, 0x8a, 0x12, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0x49,
	0x83, 0x4b, 0x08, 0x59, 0x61, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0x2a, 0x36, 0x95, 0x46, 0xbe, 0x5c,
	0x6c, 0x10, 0x95, 0x42, 0xce, 0x5c, 0x5c, 0x08, 0x3d, 0x42, 0x92, 0x7a, 0x50, 0x17, 0x60, 0x58,
	0x28, 0x25, 0x85, 0x4d, 0x0a, 0x62, 0x45, 0x12, 0x1b, 0xd8, 0xc1, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xf4, 0x63, 0x30, 0x5b, 0xc0, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MirrorClient is the client API for Mirror service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MirrorClient interface {
	// Mirrors a string
	MirrorText(ctx context.Context, in *MirrorTextRequest, opts ...grpc.CallOption) (*MirrorTextResponse, error)
}

type mirrorClient struct {
	cc grpc.ClientConnInterface
}

func NewMirrorClient(cc grpc.ClientConnInterface) MirrorClient {
	return &mirrorClient{cc}
}

func (c *mirrorClient) MirrorText(ctx context.Context, in *MirrorTextRequest, opts ...grpc.CallOption) (*MirrorTextResponse, error) {
	out := new(MirrorTextResponse)
	err := c.cc.Invoke(ctx, "/mirror.Mirror/MirrorText", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MirrorServer is the server API for Mirror service.
type MirrorServer interface {
	// Mirrors a string
	MirrorText(context.Context, *MirrorTextRequest) (*MirrorTextResponse, error)
}

// UnimplementedMirrorServer can be embedded to have forward compatible implementations.
type UnimplementedMirrorServer struct {
}

func (*UnimplementedMirrorServer) MirrorText(ctx context.Context, req *MirrorTextRequest) (*MirrorTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MirrorText not implemented")
}

func RegisterMirrorServer(s *grpc.Server, srv MirrorServer) {
	s.RegisterService(&_Mirror_serviceDesc, srv)
}

func _Mirror_MirrorText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MirrorTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MirrorServer).MirrorText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mirror.Mirror/MirrorText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MirrorServer).MirrorText(ctx, req.(*MirrorTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mirror_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mirror.Mirror",
	HandlerType: (*MirrorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MirrorText",
			Handler:    _Mirror_MirrorText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mirror.proto",
}
